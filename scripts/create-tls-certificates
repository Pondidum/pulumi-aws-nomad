#!/usr/bin/env bash

set -eEuo pipefail;

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_NAME="$(basename "$0")"

export VAULT_ADDR="http://localhost:8200"
export VAULT_TOKEN="vault"

log() {

  local readonly level="$1"
  local readonly message="$2"
  local readonly timestamp=$(date +"%Y-%m-%d %H:%M:%S")

  local green='\033[1;32m'
  local normal='\033[0m'

  >&2 echo -e "${green}${timestamp} [${level}] [$SCRIPT_NAME] ${message}${normal}"
}

assert_not_empty() {
  local -r arg_name="$1"
  local -r arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log "ERROR" "The value for '$arg_name' cannot be empty"
    exit 1
  fi
}

assert_is_installed() {
  local -r name="$1"

  if [[ ! $(command -v "${name}") ]]; then
    log "ERROR" "The binary '$name' is required by this script but is not installed or in the system's PATH."
    exit 1
  fi
}

assert_exists() {
  local -r path="$1"

  if ! [[ -e "$path" ]]; then
    log "ERROR" "The file '$path' does not exist"
    exit 1
  fi
}

start_vault() {

  log "INFO" "Starting local Vault CA"

  local -r container=$(docker run \
    -d --rm \
    --cap-add=IPC_LOCK \
    -p 8200:8200 \
    -e "VAULT_DEV_ROOT_TOKEN_ID=vault" \
    vault:latest)

  sleep 2s

  echo "$container"
}

import_root_ca() {
  local -r tls_path="$1"
  local -r max_ttl="$2"
  local -r alt_names="$3"

  log "INFO" "Importing existing Root CA"

  local -r pem=$(cat "$tls_path/ca.crt" "$tls_path/ca.key")

  vault secrets enable -path=pki_root pki
  vault secrets tune -max-lease-ttl="$max_ttl" pki_root
  vault write pki_root/config/ca pem_bundle="$pem"
}

create_root_ca() {
  local -r tls_path="$1"
  local -r max_ttl="$2"
  local -r alt_names="$3"

  log "INFO" "Creating Root CA"

  vault secrets enable -path=pki_root pki
  vault secrets tune -max-lease-ttl="$max_ttl" pki_root

  local -r result=$(vault write -format "json" \
    pki_root/root/generate/exported \
    common_name="Nomad Demo Root CA" \
    alt_names="$alt_names" \
    ttl="$max_ttl")

  mkdir -p "$tls_path"
  echo "$result" | jq -r .data.certificate > "$tls_path/ca.crt"
  echo "$result" | jq -r .data.private_key > "$tls_path/ca.key"

  log "INFO" "Wrote certificate to $tls_path/ca.crt"
  log "INFO" "Wrote private key to $tls_path/ca.key"
}

create_intermediate_ca() {
  local -r tls_path="$1"
  local -r max_ttl="$2"
  local -r alt_names="$3"

  log "INFO" "Creating Intermediate CA"

  vault secrets enable pki
  vault secrets tune -max-lease-ttl="$max_ttl" pki

  local -r csr_response=$(vault write pki/intermediate/generate/exported \
    -format=json \
    common_name="Nomad Demo Intermediate CA")

  local -r csr=$(echo "$csr_response" | jq -r .data.csr)

  local -r intermediate_pk=$(echo "$csr_response" | jq -r .data.private_key)
  local -r intermediate=$(vault write pki_root/root/sign-intermediate \
    -format=json \
    csr="$csr" \
    format=pem_bundle \
    ttl=43800h \
    | jq -r .data.certificate)

  local -r chained=$(echo -e "$intermediate\n$(cat "$tls_path/ca.crt")")

  vault write pki/intermediate/set-signed \
    certificate="$chained"

  log "INFO" "Done"

  echo "$intermediate" > "$tls_path/int.crt"
  echo "$intermediate_pk" > "$tls_path/int.key"

  log "INFO" "Wrote certificate to $tls_path/int.crt"
  log "INFO" "Wrote private key to $tls_path/int.key"

  vault write pki/roles/cert \
    allowed_domains="$alt_names" \
    allow_subdomains=true \
    max_ttl="$max_ttl"

  log "INFO" "Configured Intermediate for $alt_names with max ttl of $max_ttl"
}

issue_temp_ami_cert() {
  local -r tls_path="$1"

  log "INFO" "Issuing AMI Building Certificate for localhost and 127.0.0.1"

  local -r cert=$(vault write pki/issue/cert \
    -format=json \
    common_name="localhost" \
    ip_sans="127.0.0.1")

  echo "$cert" | jq -r .data.private_key > "$tls_path/localhost.key"
  echo "$cert" | jq -r .data.certificate > "$tls_path/localhost.crt"
  echo "$cert" | jq -r .data.issuing_ca >> "$tls_path/localhost.crt"

  log "INFO" "Wrote certificate to $tls_path/localhost.crt"
  log "INFO" "Wrote private key to $tls_path/localhost.key"
}

stop_vault() {
  local -r container="$1"

  docker stop "$container"
}

root_ca_exists() {
  local -r tls_path="$1"

  if [[ -e "$tls_path/ca.crt" ]] && [[ -e "$tls_path/ca.key" ]]; then
    log "INFO" "Root certificate exists already"
    echo "true"
  else
    log "INFO" "Root certificate doesn't exist"
    echo "false"
  fi
}

run() {
  local tls_path="$SCRIPT_DIR/../configuration/tls"
  local alt_names="localhost,consul"
  local max_ttl="87600h" # 10 years why not

  while [[ $# -gt 0 ]]; do
    local key="$1"

    case "$key" in
      --tls-path)
        tls_path="$2"
        shift
        ;;
      --alt-names)
        assert_not_empty "$key" "$2"
        alt_names="$alt_names,$2"
        shift
        ;;
      --max-ttl)
        assert_not_empty "$key" "$2"
        max_ttl="$2"
        shift
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log "ERROR" "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  assert_not_empty "--tls-path" "$tls_path"

  assert_is_installed "docker"
  assert_is_installed "vault"

  local -r container=$(start_vault)

  trap 'echo "STOP" && stop_vault "$container"' ERR

  if [[ "$(root_ca_exists "$tls_path")" == "true" ]]; then
    import_root_ca "$tls_path" "$max_ttl" "$alt_names"
  else
    create_root_ca "$tls_path" "$max_ttl" "$alt_names"
  fi

  create_intermediate_ca "$tls_path" "$max_ttl" "$alt_names"

  issue_temp_ami_cert "$tls_path"

  stop_vault "$container"

  log "INFO" "Done"
}

run "$@"
