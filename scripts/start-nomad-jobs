#!/usr/bin/env bash

set -euo pipefail;

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_NAME="$(basename "$0")"

log() {

  local readonly level="$1"
  local readonly message="$2"
  local readonly timestamp=$(date +"%Y-%m-%d %H:%M:%S")

  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function assert_not_empty {
  local -r arg_name="$1"
  local -r arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log "ERROR" "The value for '$arg_name' cannot be empty"
    exit 1
  fi
}

start_background_ssh_tunnel() {
  local -r bastion_ip="$1"
  local -r nomad_ip="$2"

  local -r timeout=10s

  log "INFO" "Creating SSH Tunnel with $timeout timeout"

  ssh \
    -T \
    -f \
    -o "ExitOnForwardFailure=yes" \
    -o "ProxyCommand ssh ubuntu@$bastion_ip -W %h:%p" \
    -L "8200:vault.service.consul:8200" \
    -L "4646:nomad.service.consul:4646" \
    "ubuntu@$nomad_ip" \
    sleep "$timeout"

  log "INFO" "SSH Tunnel started"

  export VAULT_ADDR="https://localhost:8200"
  export NOMAD_ADDR="https://localhost:4646"
}

configure_vault() {
  local -r vault_token="$1"

  export VAULT_TOKEN="$vault_token"
}

wait_for_clients() {

  local -r nomad_token=$(vault read -field secret_id nomad/creds/cluster-admin)

  local -r max_retries="10"
  local -r expected_count="2"
  local -r sleep_time="10s"

  log "INFO" "Waiting for at least $expected_count nomad clients to be available"

  for (( i=1; i<="$max_retries"; i++ )); do

    local count="$(NOMAD_TOKEN="$nomad_token" nomad node status -t '{{ . | len }}')"

    if [[ "$count" -ge "$expected_count" ]]; then
      log "INFO" "Found $count Nomad clients!"
      return
    else
      log "WARN" "Found $count Nomad clients, and we need at least $expected_count. Sleeping for $sleep_time and checking again."
      sleep "$sleep_time"
    fi
  done

  log "ERROR" "Failed to find at least $expected_count Nomad clients in $max_retries retries."
  exit 1
}

login_to_nomad() {

  log "INFO" "Creating Nomad Token for the Operator role"
  local -r nomad_token=$(vault read -field secret_id nomad/creds/operator)

  export NOMAD_ADDR="https://localhost:4646"
  export NOMAD_TOKEN="$nomad_token"

  log "INFO" "Nomad logged in"
}

run_nomad_jobs() {

  for file in "$SCRIPT_DIR/../jobs/"*; do

    log "INFO" "Running $(basename "$file")"

    nomad job run "$file"
    sleep 2s

  done

}

trust_root_ca() {
  export NOMAD_CAPATH="./configuration/tls/ca.crt"
  export VAULT_CAPATH="./configuration/tls/ca.crt"
}

run() {
  local nomad_ip=""
  local bastion_ip=""
  local vault_token=""

  while [[ $# -gt 0 ]]; do
    local key="$1"

    case "$key" in
      --bastion-ip)
        bastion_ip="$2"
        shift
        ;;
      --nomad-ip)
        nomad_ip="$2"
        shift
        ;;
      --vault-token)
        vault_token="$2"
        shift
        ;;
      *)
        log "ERROR" "Unrecognized argument: $key"
        exit 1
        ;;
    esac

    shift
  done

  assert_not_empty "--bastion-ip" "$bastion_ip"
  assert_not_empty "--nomad-ip" "$nomad_ip"
  assert_not_empty "--vault-token" "$vault_token"

  trust_root_ca

  start_background_ssh_tunnel "$bastion_ip" "$nomad_ip"
  configure_vault "$vault_token"

  wait_for_clients

  login_to_nomad

  run_nomad_jobs

  log "INFO" "Jobs scheduled"
}

run "$@"