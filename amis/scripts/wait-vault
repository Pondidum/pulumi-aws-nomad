#!/bin/bash

set -e

readonly SCRIPT_NAME="$(basename "$0")"

readonly VAULT_READY="0"
readonly VAULT_ERROR="1"
readonly VAULT_SEALED="2"

function log {
  local -r level="$1"
  local -r message="$2"
  local -r timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

# A retry function that attempts to run a command a number of times and returns the output
function wait_for_start {

  for i in $(seq 1 5); do
    output=$(vault status &> /dev/null) && exit_status=0 || exit_status=$?

    if [[ $exit_status -ne "$VAULT_ERROR" ]]; then
      return
    fi

    log "WARN" "Vault is starting still, will sleep for 10 seconds and try again."
    sleep 10

  done

  log "ERROR" "Vauld did not start after 5 attempts."
  exit $exit_status
}

function wait_for_unsealed {

  for i in $(seq 1 5); do
    output=$(vault status &> /dev/null) && exit_status=0 || exit_status=$?

    if [[ "$exit_status" -eq "$VAULT_READY" ]]; then
      return
    fi

    log "WARN" "Vault is sealed. Will sleep for 10 seconds and try again."
    sleep 10s

  done

  log "ERROR" "Vault did not unseal after 5 attempts."
  exit 1

}


function run {
    local action=""

    while [[ $# -gt 0 ]]; do
    local key="$1"

    case "$key" in
      --running)
        action="running"
        ;;
      --unsealed)
        action="unsealed"
        ;;
      *)
        log "ERROR" "Unrecognized argument: $key"
        exit 1
        ;;
    esac

    shift
  done

  if [[ -z "$action" ]]; then
    log "ERROR" "You must specify --running or --unsealed"
    exit 1
  fi

  wait_for_start

  if [[ "$action" == "unsealed" ]]; then
    wait_for_unsealed
  fi

}

run "$@"