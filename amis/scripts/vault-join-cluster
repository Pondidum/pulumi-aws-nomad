#!/bin/bash

set -euo pipefail

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_NAME="$(basename "$0")"

function log {
  local -r level="$1"
  local -r message="$2"
  local -r timestamp=$(date +"%Y-%m-%d %H:%M:%S")

  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function assert_not_empty {
  local -r arg_name="$1"
  local -r arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log "ERROR" "The value for '$arg_name' cannot be empty"
    exit 1
  fi
}

restart_vault() {
  log "INFO" "Restarting Vault with new configuration"
  systemctl restart vault
}

wait_for_unsealed() {

  for i in $(seq 1 5); do
    vault status &> /dev/null && exit_status=0 || exit_status=$?

    if [[ "$exit_status" -eq 0 ]]; then
      return
    fi

    log "WARN" "Vault is sealed. Will sleep for 10 seconds and try again."
    sleep 10s

  done

  log "ERROR" "Vault did not unseal after 5 attempts."
  exit 1
}

wait_for_raft_sync() {
  log "INFO" "Sleeping for 30s to let raft sync state"
  sleep 30s
}

join_raft_cluster() {
  log "INFO" "Attempting to join cluster"
  vault operator raft join
}


run() {

  wait_for_unsealed

  "$SCRIPT_DIR/update-certificate" \
    --cert-name "vault" \
    --common-name "vault.service.consul"

  restart_vault
  wait_for_unsealed
  wait_for_raft_sync

  join_raft_cluster

  log "INFO" "Vault setup and cluster joined"
}

run "$@"
