#!/bin/bash

set -euo pipefail

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_NAME="$(basename "$0")"

readonly EC2_INSTANCE_METADATA_URL="http://169.254.169.254/latest/dynamic/instance-identity/document"

function log {
  local -r level="$1"
  local -r message="$2"
  local -r timestamp=$(date +"%Y-%m-%d %H:%M:%S")

  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function assert_not_empty {
  local -r arg_name="$1"
  local -r arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log "ERROR" "The value for '$arg_name' cannot be empty"
    exit 1
  fi
}

lookup_metadata() {
  local -r path="$1"
  curl --silent --location "$EC2_INSTANCE_METADATA_URL" | jq -r "$path"
}

select_vault_server() {
  if [[ -n "$1" ]]; then
    log "INFO" "Using existing vault address"
    export VAULT_ADDR="$1"
    return
  fi

  local -r region=$(lookup_metadata ".region")
  local -r private_ip=$(lookup_metadata "local-ipv4")

  local -r cluster_tag="Name"
  local -r cluster_tag_vaule="vault"

  log "INFO" "Finding Vault instances in $region"

  local -r instances=$(aws ec2 describe-instances \
    --region "$region" \
    --filter "Name=tag:$cluster_tag,Values=$cluster_tag_vaule" "Name=instance-state-name,Values=running")

  local -r ip=$(echo "$instances" \
    | jq -r ".Reservations[].Instances[].PrivateIpAddress | select(. != \"$private_ip\")" \
    | head -n 1)

  export VAULT_ADDR="https://$ip:8200"

  if [[ -z "$VAULT_ADDR" ]]; then
    log "ERROR" "unable to find vault server"
    exit 1
  fi

  log "INFO" "Using Vault on $VAULT_ADDR"
}

login_to_vault() {
  local -r vault_addr="$1"
  local -r vault_role="$2"

  if [[ -n "$vault_addr" ]]; then
    log "INFO" "Using existing vault token"
    export VAULT_TOKEN="$vault_addr"
    return
  fi

  log "INFO" "Logging into Vault"

  local -r token=$(vault login -method=aws -token-only role="$vault_role")
  export VAULT_TOKEN="$token"

  if [[ -z "$VAULT_TOKEN" ]]; then
    log "ERROR" "unable to login to vault"
    exit 1
  fi

  log "INFO" "Logged in!"
}

get_key() {
  vault kv get -field=gossip-key kv/consul
}

run() {
  local vault_role=""
  local vault_addr="${VAULT_ADDR:-}"
  local vault_token="${VAULT_TOKEN:-}"

  while [[ $# -gt 0 ]]; do
    local key="$1"

    case "$key" in
      --vault-role)
        vault_role="$2"
        shift
        ;;
      --vault-addr)
        assert_not_empty "$key" "$2"
        vault_addr="$2"
        shift
        ;;
      --vault-token)
        assert_not_empty "$key" "$2"
        vault_token="$2"
        shift
        ;;
      *)
        log "ERROR" "Unrecognized argument: $key"
        exit 1
        ;;
    esac

    shift
  done

  assert_not_empty "--vault-role" "$vault_role"

  select_vault_server "$vault_addr"
  login_to_vault "$vault_token" "$vault_role"

  get_key
}

run "$@"
