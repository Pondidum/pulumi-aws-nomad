#!/bin/bash

set -euo pipefail

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_NAME="$(basename "$0")"

readonly EC2_INSTANCE_METADATA_URL="http://169.254.169.254/latest/dynamic/instance-identity/document"

function print_usage {
  echo
  echo "Usage: $SCRIPT_NAME [OPTIONS]"
  echo
  echo "This script is used to generate metadata for the Nomad client from AWS Instance data."
  echo
  echo "Options:"
  echo
  echo -e "  --config-dir\t\tThe path to the Nomad config folder. Optional. Default is the absolute path of '../config', relative to this script."
  echo
  echo "Examples:"
  echo
  echo "  $SCRIPT_NAME"
}

log() {
  local -r level="$1"
  local -r message="$2"
  local -r timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

assert_not_empty() {
  local -r arg_name="$1"
  local -r arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

lookup_metadata() {
  local -r path="$1"
  curl --silent --location "$EC2_INSTANCE_METADATA_URL" | jq -r "$path"
}

get_instance_tags() {

  local -r instance_id=$(lookup_metadata ".instanceId")
  local -r region=$(lookup_metadata ".region")

  local -r tags=$(aws ec2 describe-tags \
    --filters "Name=resource-id,Values=$instance_id" \
    --region "$region")

  echo "$tags"
}

generate_config() {
  local -r config_dir="$1"
  local -r user="$2"

  local -r config_path="$config_dir/meta.hcl"
  local -r tags_json=$(get_instance_tags)

  local -r tags_kv=$(echo "$tags_json" | jq -r '.Tags[] | "    \"\(.Key)\" = \"\(.Value)\""')

  local -r config=$(cat <<EOF
client {
  meta {
$tags_kv
  }
}\n
EOF
)

  echo -e "$config" > "$config_path"

  chown "$user:$user" "$config_path"
}

get_owner_of_path() {
  local -r path="$1"
  ls -ld "$path" | awk '{print $3}'
}

run() {
  local config_dir=""
  local user=""

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --config-dir)
        assert_not_empty "$key" "$2"
        config_dir="$2"
        shift
        ;;
      --user)
        assert_not_empty "$key" "$2"
        user="$2"
        shift
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  if [[ -z "$config_dir" ]]; then
    config_dir=$(cd "$SCRIPT_DIR/../config" && pwd)
  fi

  if [[ -z "$user" ]]; then
    user=$(get_owner_of_path "$config_dir")
  fi

  generate_config "$config_dir" "$user"
}

run "$@"
